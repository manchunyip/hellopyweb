node {
    def app

    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: params.JP_DockerMechIdCredential, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
    	usr = USERNAME
		pswd = PASSWORD
	}
    

    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */

        checkout scm
    }

    stage('Build image') {
        /* This builds the actual image; synonymous to
         * docker build on the command line */
        
        docker.withRegistry("https://nfdregistrydev.azurecr.io", params.JP_DockerMechIdCredential) {
			sh "docker login -u ${usr} -p ${pswd} https://nfdregistrydev.azurecr.io"
            app = docker.build("manchunyip/hellopyweb")			
		}
        //app = docker.build("manchunyip/hellopyweb")
    }

    stage('Test image') {
        /* Ideally, we would run a test framework against our image.
         * For this example, we're using a Volkswagen-type approach ;-) */

       echo 'steps test image 2' 
        
    }

    stage('Push image') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
        docker.withRegistry("https://nfdregistrydev.azurecr.io", params.JP_DockerMechIdCredential) {
            sh "cat /root/.dockercfg" 
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
		}
        /*
        docker.withRegistry('https://nfdregistrydev.azurecr.io', 'acr-dev-credentials') {
            // debug
            sh "cat /root/.dockercfg" 
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
        }*/
    }
}
